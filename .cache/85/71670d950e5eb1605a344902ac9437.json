{"id":"Focm","dependencies":[{"name":"C:\\Users\\HP\\Desktop\\progect\\lessons GoIt\\JavaScript\\goit-js-hw-11-promisification\\package.json","includedInParent":true,"mtime":1604320244304}],"generated":{"js":"var e=function(e){return Promise.resolve(\"\".concat(e))},n=function(e){return console.log(\"Resolved after \".concat(e,\"ms\"))};e(2e3).then(n),e(1e3).then(n),e(1500).then(n);"},"sourceMaps":{"js":{"mappings":[{"source":"index.js","original":{"line":6,"column":0},"generated":{"line":1,"column":0}},{"source":"index.js","name":"delay","original":{"line":6,"column":6},"generated":{"line":1,"column":4}},{"source":"index.js","original":{"line":6,"column":14},"generated":{"line":1,"column":6}},{"source":"index.js","name":"ms","original":{"line":6,"column":14},"generated":{"line":1,"column":15}},{"source":"index.js","name":"Promise","original":{"line":7,"column":9},"generated":{"line":1,"column":18}},{"source":"index.js","name":"Promise","original":{"line":7,"column":9},"generated":{"line":1,"column":25}},{"source":"index.js","name":"resolve","original":{"line":7,"column":17},"generated":{"line":1,"column":33}},{"source":"index.js","name":"ms","original":{"line":7,"column":28},"generated":{"line":1,"column":41}},{"source":"index.js","name":"ms","original":{"line":7,"column":28},"generated":{"line":1,"column":44}},{"source":"index.js","name":"ms","original":{"line":7,"column":28},"generated":{"line":1,"column":51}},{"source":"index.js","name":"logger","original":{"line":16,"column":6},"generated":{"line":1,"column":56}},{"source":"index.js","original":{"line":16,"column":15},"generated":{"line":1,"column":58}},{"source":"index.js","name":"time","original":{"line":16,"column":15},"generated":{"line":1,"column":67}},{"source":"index.js","name":"console","original":{"line":16,"column":23},"generated":{"line":1,"column":70}},{"source":"index.js","name":"console","original":{"line":16,"column":23},"generated":{"line":1,"column":77}},{"source":"index.js","name":"log","original":{"line":16,"column":31},"generated":{"line":1,"column":85}},{"source":"index.js","name":"time","original":{"line":16,"column":53},"generated":{"line":1,"column":89}},{"source":"index.js","name":"time","original":{"line":16,"column":53},"generated":{"line":1,"column":107}},{"source":"index.js","name":"time","original":{"line":16,"column":53},"generated":{"line":1,"column":114}},{"source":"index.js","original":{"line":16,"column":19},"generated":{"line":1,"column":116}},{"source":"index.js","name":"delay","original":{"line":19,"column":0},"generated":{"line":1,"column":124}},{"source":"index.js","original":{"line":19,"column":6},"generated":{"line":1,"column":126}},{"source":"index.js","name":"then","original":{"line":19,"column":12},"generated":{"line":1,"column":131}},{"source":"index.js","name":"logger","original":{"line":19,"column":17},"generated":{"line":1,"column":136}},{"source":"index.js","name":"delay","original":{"line":20,"column":0},"generated":{"line":1,"column":139}},{"source":"index.js","original":{"line":20,"column":6},"generated":{"line":1,"column":141}},{"source":"index.js","name":"then","original":{"line":20,"column":12},"generated":{"line":1,"column":146}},{"source":"index.js","name":"logger","original":{"line":20,"column":17},"generated":{"line":1,"column":151}},{"source":"index.js","name":"delay","original":{"line":21,"column":0},"generated":{"line":1,"column":154}},{"source":"index.js","original":{"line":21,"column":6},"generated":{"line":1,"column":156}},{"source":"index.js","name":"then","original":{"line":21,"column":12},"generated":{"line":1,"column":162}},{"source":"index.js","name":"logger","original":{"line":21,"column":17},"generated":{"line":1,"column":167}}],"sources":{"index.js":"/* Напиши функцию delay(ms), которая возвращает промис,\r\nпереходящий в состояние \"resolved\" через ms миллисекунд.\r\nЗначением исполнившегося промиса должно быть то кол - во\r\nмиллисекунд которое передали во время вызова функции delay.*/\r\n\r\nconst delay = ms => {\r\n  return Promise.resolve(`${ms}`);\r\n};\r\n\r\n\r\n\r\n/*function logger(result) {\r\n    console.log(result);\r\n}*/\r\n\r\nconst logger = time => console.log(`Resolved after ${time}ms`);\r\n\r\n// Вызовы функции для проверки\r\ndelay(2000).then(logger); // Resolved after 2000ms\r\ndelay(1000).then(logger); // Resolved after 1000ms\r\ndelay(1500).then(logger); // Resolved after 1500ms"},"lineCount":null}},"error":null,"hash":"d306ba28353d6a8c218c6a8e1cf51180","cacheData":{"env":{}}}