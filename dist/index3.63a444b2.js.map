{"version":3,"sources":["index3.js"],"names":["randomIntegerFromInterval","min","max","Math","floor","random","makeTransaction","transaction","delay","Promise","resolve","reject","setTimeout","canProcess","id","time","logSuccess","console","log","logError","warn","amount","then","catch"],"mappings":"AAAA;AACA;AACA;AACA;AACA,IAAMA,yBAAyB,GAAG,SAA5BA,yBAA4B,CAACC,GAAD,EAAMC,GAAN,EAAc;AACxC,SAAOC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBH,GAAG,GAAGD,GAAN,GAAY,CAA7B,IAAkCA,GAA7C,CAAP;AACC,CAFT;;AAIA,IAAMK,eAAe,GAAG,SAAlBA,eAAkB,CAACC,WAAD,EAAiB;AACrC,MAAMC,KAAK,GAAGR,yBAAyB,CAAC,GAAD,EAAM,GAAN,CAAvC;AAEA,SAAO,IAAIS,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAEtCC,IAAAA,UAAU,CAAC,YAAM;AACf,UAAMC,UAAU,GAAGV,IAAI,CAACE,MAAL,KAAgB,GAAnC;;AAEI,UAAIQ,UAAJ,EAAgB;AACdH,QAAAA,OAAO,CAAC;AAACI,UAAAA,EAAE,EAAEP,WAAW,CAACO,EAAjB;AAAqBC,UAAAA,IAAI,EAAEP;AAA3B,SAAD,CAAP;AACD;;AACDG,MAAAA,MAAM,CAACJ,WAAW,CAACO,EAAb,CAAN;AACH,KAPO,EAOLN,KAPK,CAAV;AAQD,GAVM,CAAP;AAWH,CAdD;;AAgBA,IAAMQ,UAAU,GAAG,SAAbA,UAAa,OAAgB;AAAA,MAAdF,EAAc,QAAdA,EAAc;AAAA,MAAVC,IAAU,QAAVA,IAAU;AACjCE,EAAAA,OAAO,CAACC,GAAR,uBAA2BJ,EAA3B,2BAA8CC,IAA9C;AACD,CAFD;;AAIA,IAAMI,QAAQ,GAAG,SAAXA,QAAW,CAAAL,EAAE,EAAI;AACrBG,EAAAA,OAAO,CAACG,IAAR,wCAA6CN,EAA7C;AACD,CAFD;;AAIAR,eAAe,CAAC;AAAEQ,EAAAA,EAAE,EAAE,EAAN;AAAUO,EAAAA,MAAM,EAAE;AAAlB,CAAD,CAAf,CACGC,IADH,CACQN,UADR,EAEGO,KAFH,CAESJ,QAFT;AAIAb,eAAe,CAAC;AAAEQ,EAAAA,EAAE,EAAE,EAAN;AAAUO,EAAAA,MAAM,EAAE;AAAlB,CAAD,CAAf,CACGC,IADH,CACQN,UADR,EAEGO,KAFH,CAESJ,QAFT;AAIAb,eAAe,CAAC;AAAEQ,EAAAA,EAAE,EAAE,EAAN;AAAUO,EAAAA,MAAM,EAAE;AAAlB,CAAD,CAAf,CACGC,IADH,CACQN,UADR,EAEGO,KAFH,CAESJ,QAFT;AAIAb,eAAe,CAAC;AAAEQ,EAAAA,EAAE,EAAE,EAAN;AAAUO,EAAAA,MAAM,EAAE;AAAlB,CAAD,CAAf,CACGC,IADH,CACQN,UADR,EAEKO,KAFL,CAEWJ,QAFX;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAAE;AACF;AACA;AACA","file":"index3.63a444b2.js","sourceRoot":"..\\src","sourcesContent":["/*Перепиши функцию makeTransaction() так, чтобы она не\r\nиспользовала callback - функции onSuccess и onError,\r\n    а принимала всего один параметр transaction и\r\nвозвращала промис.*/\r\nconst randomIntegerFromInterval = (min, max) => {\r\n        return Math.floor(Math.random() * (max - min + 1) + min);\r\n        }; \r\n \r\nconst makeTransaction = (transaction) => {\r\n    const delay = randomIntegerFromInterval(200, 500);\r\n\r\n    return new Promise((resolve, reject) => {\r\n        \r\n      setTimeout(() => {\r\n        const canProcess = Math.random() > 0.3;\r\n        \r\n            if (canProcess) {\r\n              resolve({id: transaction.id, time: delay});  \r\n            }\r\n            reject(transaction.id);\r\n        }, delay);\r\n    });\r\n};\r\n\r\nconst logSuccess = ({id, time}) => {\r\n  console.log(`Transaction ${id} processed in ${time}ms`);\r\n};\r\n\r\nconst logError = id => {\r\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\r\n};\r\n\r\nmakeTransaction({ id: 70, amount: 150 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({ id: 71, amount: 230 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({ id: 72, amount: 75 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({ id: 73, amount: 100 })\r\n  .then(logSuccess)\r\n    .catch(logError);\r\n/*\r\n * Работает так\r\n \r\nmakeTransaction({ id: 70, amount: 150 }, logSuccess, logError);\r\nmakeTransaction({ id: 71, amount: 230 }, logSuccess, logError);\r\nmakeTransaction({ id: 72, amount: 75 }, logSuccess, logError);\r\nmakeTransaction({ id: 73, amount: 100 }, logSuccess, logError);\r\n*//*\r\n * Должно работать так\r\n \r\n*/"]}