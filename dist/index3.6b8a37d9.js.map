{"version":3,"sources":["index3.js"],"names":["randomIntegerFromInterval","min","max","Math","floor","random","makeTransaction","transaction","delay","Promise","resolve","reject","setTimeout","id","time","logSuccess","console","log","logError","warn","amount","then","catch"],"mappings":";AAIA,IAAMA,EAA4B,SAACC,EAAKC,GACzBC,OAAAA,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IAGtDK,EAAkB,SAACC,GACfC,IAAAA,EAAQR,EAA0B,IAAK,KAEtC,OAAA,IAAIS,QAAQ,SAACC,EAASC,GAE3BC,WAAW,WACUT,KAAKE,SAAW,IAG7BK,EAAQ,CAACG,GAAIN,EAAYM,GAAIC,KAAMN,IAErCG,EAAOJ,EAAYM,KACpBL,MAILO,EAAa,SAAgB,GAAdF,IAAAA,EAAAA,EAAAA,GAAIC,EAAAA,EAAAA,KACvBE,QAAQC,IAAmBJ,eAAAA,OAAAA,EAAmBC,kBAAAA,OAAAA,EAA9C,QAGII,EAAW,SAAAL,GACfG,QAAQG,KAAqCN,gCAAAA,OAAAA,EAA7C,+BAGFP,EAAgB,CAAEO,GAAI,GAAIO,OAAQ,MAC/BC,KAAKN,GACLO,MAAMJ,GAETZ,EAAgB,CAAEO,GAAI,GAAIO,OAAQ,MAC/BC,KAAKN,GACLO,MAAMJ,GAETZ,EAAgB,CAAEO,GAAI,GAAIO,OAAQ,KAC/BC,KAAKN,GACLO,MAAMJ,GAETZ,EAAgB,CAAEO,GAAI,GAAIO,OAAQ,MAC/BC,KAAKN,GACHO,MAAMJ","file":"index3.6b8a37d9.js","sourceRoot":"..\\src","sourcesContent":["/*Перепиши функцию makeTransaction() так, чтобы она не\r\nиспользовала callback - функции onSuccess и onError,\r\n    а принимала всего один параметр transaction и\r\nвозвращала промис.*/\r\nconst randomIntegerFromInterval = (min, max) => {\r\n        return Math.floor(Math.random() * (max - min + 1) + min);\r\n        }; \r\n \r\nconst makeTransaction = (transaction) => {\r\n    const delay = randomIntegerFromInterval(200, 500);\r\n\r\n    return new Promise((resolve, reject) => {\r\n        \r\n      setTimeout(() => {\r\n        const canProcess = Math.random() > 0.3;\r\n        \r\n            if (canProcess) {\r\n              resolve({id: transaction.id, time: delay});  \r\n            }\r\n            reject(transaction.id);\r\n        }, delay);\r\n    });\r\n};\r\n\r\nconst logSuccess = ({id, time}) => {\r\n  console.log(`Transaction ${id} processed in ${time}ms`);\r\n};\r\n\r\nconst logError = id => {\r\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\r\n};\r\n\r\nmakeTransaction({ id: 70, amount: 150 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({ id: 71, amount: 230 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({ id: 72, amount: 75 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({ id: 73, amount: 100 })\r\n  .then(logSuccess)\r\n    .catch(logError);\r\n/*\r\n * Работает так\r\n \r\nmakeTransaction({ id: 70, amount: 150 }, logSuccess, logError);\r\nmakeTransaction({ id: 71, amount: 230 }, logSuccess, logError);\r\nmakeTransaction({ id: 72, amount: 75 }, logSuccess, logError);\r\nmakeTransaction({ id: 73, amount: 100 }, logSuccess, logError);\r\n*//*\r\n * Должно работать так\r\n \r\n*/"]}